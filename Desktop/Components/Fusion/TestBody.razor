@using System.Threading
@using Desktop.Fusion
@using Stl.Fusion
@inherits LiveComponentBase<string>
@inject CounterService CounterService

@{
    var state = State.LastValue;
    var error = State.Error;
}

@if (error != null) {
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}

<p>Count: @state</p><button class="btn btn-primary" @onclick="IncrementAsync">Increment</button>

@code {
    protected override async Task<string> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var count = await CounterService.GetAsync("a").ConfigureAwait(false);
        return $"{count}";
    }

    private async Task IncrementAsync()
    {
        await CounterService.Increment("a");
    // The next call just improves UX: it cancels active update delay.
    // You can comment it out & see everything still works, though the
    // counter updates with 0.5s delay.
    // The default update delay is set to 0.5s in Startup.cs (~ line 33).
        State.CancelUpdateDelay();
    }

}