@using k8s
@using k8s.KubeConfigModels
@using Desktop.Services
@using System.Threading
@using Desktop.Services.Context
@inherits LiveComponentBase<List<string>, string>
@inject Kubernetes KubernetesClient
@inject CurrentContext CurrentContext

<BSDropdown>
    <BSDropdownToggle>@CurrentConfig</BSDropdownToggle>
    <BSDropdownMenu>
        @foreach (var contextName in State.LastValue ?? new List<string>())
        {
            <BSDropdownItem OnClick="@(() => SetCurrentContext(contextName))">@contextName</BSDropdownItem>
        }
    </BSDropdownMenu>
</BSDropdown>

@code {
    private K8SConfiguration? Configuration { get; set; }
    private string CurrentConfig => Configuration?.CurrentContext ?? string.Empty;
    private List<Context> AvailableContexts => Configuration?.Contexts.ToList();

    protected override void OnParametersSet()
    {
        Configuration = KubernetesClientConfiguration.LoadKubeConfig();
    }

    private void SetCurrentContext(string selectedContextName)
    {
        if (Configuration == null)
            return;
        
        Configuration.CurrentContext = selectedContextName;
        InMemoryUserPreferencesStore.CurrentContextName = selectedContextName;
        CurrentContext.Set(selectedContextName);
        // StateContainerLoadingSupervisor.LoadAllAsync(CancellationToken.None);
    }

    protected override Task<List<string>> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var config = KubernetesClientConfiguration.LoadKubeConfig();
        return Task.FromResult(config?.Contexts.Select(context => context.Name).ToList());
    }

}