@using Desktop.Services
@using k8s
@using k8s.Models
@using Newtonsoft.Json
@using YamlDotNet.Serialization
@using System.Threading
@inherits LiveComponentBase<List<V1Pod>>
@inject KubernetesRepository<V1PodList, V1Pod> K8SRepository


@if (Entity?.Metadata == null)
{
    <Loading/>
}
else
{
    <ul>
        @foreach (var pod in State.LastValue ?? new List<V1Pod>())
        {
            <li>
                @pod.Name()
            </li>
        }
    </ul>
}

@code
{
    [Parameter]
    public IKubernetesObject<V1ObjectMeta> Entity { get; set; }

    private string EntityName => Entity.Metadata.Name;

    private string EntityNamespace => Entity.Metadata.Namespace();

    protected override async Task<List<V1Pod>> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var all = await K8SRepository.GetAll();

        var selected = all            
            .Where(pod => pod.Namespace() == EntityNamespace)
            .Where(pod => pod.Spec.Volumes.Any(v => v.ConfigMap != null && v.ConfigMap.Name == EntityName))           
            .ToList();

        return selected;
    }
}