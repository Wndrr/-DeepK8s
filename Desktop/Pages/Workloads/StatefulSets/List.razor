@page "/StatefulSets"
@using Desktop.Services
@using System.Threading
@inherits LiveComponentBase<List<V1StatefulSet>>
@inject KubernetesRepository<V1StatefulSetList, V1StatefulSet> K8SRepository

<h1>
    StatefulSets
</h1>

<DisplayEntities Entities="State.LastValue">
    <Header>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Owners
                </th>
                <th>
                    Creation date & uptime
                </th>
                <th>
                    Actions
                </th>
            </tr>
    </Header>
    <Body>
            @if (State.LastValue == null)
            {
                <Loading/>
            }
            else
            {
                @foreach (var entity in State.LastValue.OrderBy(s => s.Metadata.Name))
                {
                    <tr>
                        <td>
                            <NamespaceReference>
                                @entity.Metadata.Namespace()
                            </NamespaceReference>
                            <br/>
                            <StatefulSetReference entity="@entity">
                                @entity.Metadata.Name
                            </StatefulSetReference>
                        </td>
                        <td>

                            @{
                                var metadataOwnerReferences = entity.Metadata?.OwnerReferences;
                                foreach (var ownerReference in metadataOwnerReferences ?? new List<V1OwnerReference>())
                                {
                                    switch (ownerReference.Kind)
                                    {
                                        case "ReplicaSet":
                                            <ReplicaSetReference>
                                                @ownerReference.Name
                                            </ReplicaSetReference>
                                            break;
                                        case "DaemonSet":
                                            <DaemonSetReference>
                                                @ownerReference.Name
                                            </DaemonSetReference>
                                            break;
                                        case "StatefulSet":
                                            <StatefulSetReference>
                                                @ownerReference.Name
                                            </StatefulSetReference>
                                            break;
                                        default:
                                            <span>
                                                @ownerReference.Name
                                            </span>
                                            break;
                                    }
                                }
                            }
                        </td>
                        <td>
                            @if (entity.Metadata.CreationTimestamp.HasValue)
                            {
                                var creationTimestamp = entity.Metadata.CreationTimestamp.Value.ToUniversalTime();
                                <CreationDateDisplay BaseUtcDateTime="@creationTimestamp"/>
                                <Uptime BaseUtcDateTime="@creationTimestamp"/>
                                
                            }
                        </td>
                        <td>
                            <TerminateEntity Entity="@entity"/>
                        </td>
                    </tr>
                }
            }
    </Body>
</DisplayEntities>


@code
{
    protected override async Task<List<V1StatefulSet>> ComputeStateAsync(CancellationToken cancellationToken)
    {
        return await K8SRepository.GetAllNamespaced();
    }
}