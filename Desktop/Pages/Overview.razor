@page "/"
@page "/overview"
@using k8s
@using k8s.Models
@using System.Collections.ObjectModel
@using Desktop.Services
@using Desktop.Services.StateContainers
@inject SelectedNamespacesState SelectedNamespacesState
@inject PodStateContainer V1PodEntities
@inject ServiceStateContainer V1ServiceEntities
@inject IngressStateContainer V1IngressEntities

<h1>Cluster overview</h1>
<div class="row">
    <div class="card col text-center">
        <div class="card-body">
            <h1>
                <NullPlaceholder Content="@PodCount"/>
            </h1>
            <h2>
                Pods
            </h2>
            <h4>
                @PodStatusOverview
            </h4>
        </div>
    </div>
    <div class="card col text-center">
        <div class="card-body">
            <h1>
                <NullPlaceholder Content="@ServiceCount"/>
            </h1>
            <h2>
                Services
            </h2>
        </div>
    </div>
    <div class="card col text-center">
        <div class="card-body">
            <h1>
                <NullPlaceholder Content="@IngressCount"/>
            </h1>
            <h2>
                Ingresses
            </h2>
        </div>
    </div>
</div>

<TestBody/>

@code
{
    int? PodCount { get; set; }
    string PodStatusOverview { get; set; }
    int? ServiceCount { get; set; }
    int? IngressCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RegisterUpdateEvents();
        UpdateCounts();
        await base.OnInitializedAsync();
    }

    private void UpdateCounts()
    {
        var filteredPods = V1PodEntities.Items.Where(s => SelectedNamespacesState.Contains(s.Value.Metadata.Namespace())).ToList();
        PodCount = filteredPods.Count;
        PodStatusOverview = BuildStatusString(filteredPods.Select(s => s.Value));
        ServiceCount = V1ServiceEntities.Items.Count(s => SelectedNamespacesState.Contains(s.Value.Metadata.Namespace()));
        IngressCount = V1IngressEntities.Items.Count(s => SelectedNamespacesState.Contains(s.Value.Metadata.Namespace()));
    }

    private void RegisterUpdateEvents()
    {
        SelectedNamespacesState.StateChanged += UpdateState;
        V1PodEntities.StateChanged += UpdateState;
        V1ServiceEntities.StateChanged += UpdateState;
        V1IngressEntities.StateChanged += UpdateState;
    }

    private async void UpdateState(object? sender, EventArgs e)
    {
        UpdateCounts();
        await InvokeAsync(StateHasChanged);
    }

    private static string BuildStatusString(IEnumerable<V1Pod> entities)
    {
        return string.Join(" - ", entities.Select(s => s.Status.Phase).GroupBy(s => s).Select(s => $"{s.Count()} {s.Key}"));
    }
}