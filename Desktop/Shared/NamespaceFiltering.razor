@using k8s
@using k8s.Models
@using System.Collections.ObjectModel
@using System.Threading
@using Desktop.Services
@using Stl.Fusion
@inherits LiveComponentBase<List<string>>
@inject FusionSelectedNamespacesState SelectedNamespacesState
@inject KubernetesRepository<V1NamespaceList, V1Namespace> K8SRepository

<div class="btn-group btn-group-justified" role="group" aria-label="Multi selection">
    <button @onclick="DeselectAll" type="button" class="col btn btn-outline-danger">
        X
    </button>
    <button @onclick="SelectAll" type="button" class="col btn btn-outline-success">
        *
    </button>
</div>
<div>
    @foreach (var names in State.LastValue.OrderBy(s => s))
    {
        var checkboxId = "ns_" + names;
        <div>
            <label for="@checkboxId">
                <input id="@checkboxId" type="checkbox" checked="@(IsNamespaceSelected(names))" @onclick="@(() => ToggleNamespaceFilter(names))"/> @names
            </label>
        </div>
    }
</div>

@code {
    private bool IsNamespaceSelected(string ns)
    {
        return SelectedNamespacesState.Contains(ns);
    }

    private void ToggleNamespaceFilter(string ns)
    {
        SelectedNamespacesState.Toggle(ns);
        State.Invalidate();
        State.CancelUpdateDelay();
    }

    private void DeselectAll()
    {
        SelectedNamespacesState.Clear();
        State.Invalidate();
        State.CancelUpdateDelay();
    }

    private void SelectAll()
    {
        SelectedNamespacesState.Clear();
        SelectedNamespacesState.AddRange(State.Value.Select(s => s));
        State.Invalidate();
        State.CancelUpdateDelay();
    }

    protected override async Task<List<string>> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var namespaces = await K8SRepository.GetAll();
        return namespaces.Select(s => s.Metadata.Name).ToList();
    }

}